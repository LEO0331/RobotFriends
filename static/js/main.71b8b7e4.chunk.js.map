{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBar.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","cardsArray","map","user","index","SearchBar","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","event","searchfield","target","value","fetch","then","response","json","filterRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+NAmCeA,EAbF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCOOK,EAhCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAMZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAQ,cAAC,EAAD,CAAkBT,GAAIK,EAAOI,GAAOT,GAAIF,KAAMO,EAAOI,GAAOX,KAAMC,MAAOM,EAAOI,GAAOV,OAA5EU,MAGpB,OACC,8BACIH,KCCSI,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,qBAAKV,UAAU,MAAf,SACE,uBAAOA,UAAU,gCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCDDI,G,MARA,SAAClB,GACf,OACC,qBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEtB,EAAMuB,aCeKC,E,kDAlBd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,UAAU,GAHC,E,qDAOb,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG1B,WACC,OAAIG,KAAKJ,MAAMC,SACP,oBAAItB,UAAU,QAAd,4CAEDyB,KAAK7B,MAAMuB,a,GAhBOQ,IAAMC,WCiFlBC,E,kDAxCd,aAAc,IAAD,8BACZ,gBAaDnB,aAAe,SAACoB,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAa,IAJF,E,qDAQb,WAAoB,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAI,OAAI,EAAKmB,SAAS,CAACtB,OAAQG,S,oBAMvC,WAAQ,MACuBkB,KAAKJ,MAA5BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACTO,EAAelC,EAAOmC,QAAO,SAACC,GACnC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAEtD,OAAIrC,EAAOuC,OAIV,sBAAK3C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWU,aAAce,KAAKf,eAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUN,OAAQkC,WARd,oBAAItC,UAAU,QAAd,yB,GAxBQ4B,aC9BHgB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCGdO,IAASC,OACR,cAAC,EAAD,IACCC,SAASC,eAAe,SAsB1BX,M","file":"static/js/main.71b8b7e4.chunk.js","sourcesContent":["import React from 'react';//jsx\n//?200x200: height weight\n//props: properties listed in index.js under card tag\n//syntax: {}; SCSS: <img/> / is a MUST, use a relative path: https://stackoverflow.com/questions/45445139/webpack-3-image-src-issue-for-react-html-loader-transform-react-jsx-img-impo\n/*\nconst Card = (props) => {\n\treturn(\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> 用``不是''\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nOR \nconst Card = ({name, email, id}) => {} //destructuring\nRendering child elements in React using Fragments: \nhttps://blog.logrocket.com/rendering-child-elements-react-fragments/\n*/\n\nconst Card = (props) => {\n\tconst {name, email, id} = props;\n\treturn(\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n//key: better not change, use unique element such as id\n//Create Cardlist as the parent of Card, iterate all cards listed in card.js\nconst Cardlist = ({robots}) => {\n\t/* testing ErrorBoundry\n\tif (true){\n\t\tthrow new Error('ggggggg')\n\t}\n\t*/\n\tconst cardsArray = robots.map((user, index) => {\n\t\treturn (<Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email} />);\n\t\t//return <Card key={index} id={user.id} name={user.name} email={user.email}/>user表robots的每個element\n\t})\n\treturn (\n\t\t<div>\n  \t\t\t{cardsArray}\n  \t\t</div>\n  \t);\n} \n\n/*\nconst Cardlist = ({robots}) => {\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{\n  \t\t\t\trobots.map((user, index) => {\n\t\t\t\treturn (<Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email} />);\n\t\t\t\t//return <Card key={index} id={user.id} name={user.name} email={user.email}/>user表robots的每個element\n  \t\t\t}\n  \t\t</div>\n  \t);\n} \n*/\n\nexport default Cardlist;","import React from 'react';\n//placeholder:specify a short hint describing the expected value of an input field, displayed before the user enters a value\n//type='search':defines a text field for entering a search string\n//set a name for the search field: <label for=\"gsearch\">Search Google:</label> OR sebsite search\n//{} need to be added in React\n//onChange Event = function; occured when checked state has changed: 每當表格欄位值改變，這個 event 跟著發生\nconst SearchBar = ({searchChange}) => {\n  return(\n    <div className='pa2'>\n      <input className='pa3 bg-light-blue ba b--green' \n      type='search' \n      placeholder='search robots' \n      onChange={searchChange}/>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\n//style: js -->{} objective -->{}\n//overflowY: css property (css: overflow-y, <tagname style=\"property:value;\">)\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1 className='f2 tc'>Ooops! Something went wrong...</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport Cardlist from '../Components/Cardlist';//first dot: leave the current folder, second dot: enter the folder\n//import {robots} from './robots'; fetch robot data ONLINE\nimport SearchBar from '../Components/SearchBar';\nimport './App.css';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\n//state: Object, discribe application, able to change VS props: things come out of state \n//className attribute: 指定一個 CSS class\n/*\n\tconst state = {\n\t\trobots: robots, //from robots.js\n\t\tsearchField: ''\n\t}\n\tconstructor(){\n\t\tsuper() //represent element in React.Component\n\t\tthis.state = state;//state is self-build\n\t}\n\tOR No definition of const state -->\n\tconstructor(props){//inbuild method in React.Component, NO need to use () => {}\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trobots: props.robots,\n\t\t};\n\t}\n\n\tsearchChange(event){//in class, must be method, no need \"function\" name(){}\n\t\tconsole.log(event);//the value of the search\n\t}\n\t\n\tsearchChange(event){\n\t\tconsole.log(event.target.value);//return the value of the search u type/term\n\t}\n\tALWAYS use searchChange = event => {} to create method so that 'this' will always refer to the App.js not the Callback function in the child e.g. SearchBar.js\n\tsearchChange = (event) => {\n\t\tconst filterRobots = this.state.robots.filter((robot) => {//find elements in robots.js\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase();) //return robot name that match to the searchfield\n\t\t});\n\t}\n\tsetState(): inbuild function to set the value of state(property in constructor)\n*/\n\nclass App extends Component{//Classes Are Functions:https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\t//https://reactjs.org/docs/react-component.html\n\tcomponentDidMount(){//set up any subscriptions; unsubscribe in componentWillUnmount()\n\t\tfetch('https://jsonplaceholder.typicode.com/users')//{JSON} Placeholder: fake API for testing\n\t\t\t.then(response => response.json())//http request, get response, then transform the response to json\n\t\t\t.then(user => this.setState({robots: user}));//trigger an extra rendering before the browser updates the screen: cons -> rend -> comp -> rend\n\t}\n\t//不能在render裡面使用setState，不在render()中修改state或是和瀏覽器互動\n\tsearchChange = (event) => {//self defined method\n\t\tthis.setState({searchfield: event.target.value});//update searchfield when we type\n\t}\n\trender(){//inbuild method in React.Component\n\t\tconst {robots, searchfield} = this.state;\n\t\tconst filterRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t})\n\t\tif(!robots.length){\n\t\t\treturn <h1 className='f2 tc'>Loading</h1>\n\t\t} else{\n\t\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f2'>RobotsFriends</h1>\n\t\t\t\t<SearchBar searchChange={this.searchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<Cardlist robots={filterRobots}/> \n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n/*\nconst App = () => {\n\treturn (\n\t\t<div classname='tc'>\n\t\t\t<h1>RobotsFriends</h1>\n\t\t\t<SearchBar />\n\t\t\t<Cardlist robots={robots}/> robots: properties\n\t\t\t\t2. <SearchBar searchChange={this.searchChange}/>\n\t\t\t\t2. <Cardlist robots={this.state.robots}/> \n\t\t</div>\n\t);\n}\n!robots.length ?\n\t<h1 className='f2 tc'>Loading</h1> :\n\t(THINGS TO BE RETURNED)\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';//react-dom in node_modules\nimport './index.css'; //./ --> in the same directory\n//import Card from './Card';\nimport App from './Containers/App';//father of all child nodes; same layer, no need to leave, just enter the folder\n//import Cardlist from './Cardlist';\nimport 'tachyons';//new package\nimport {robots} from './robots';//more than one export: {}\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<App />,\n \tdocument.getElementById('root')\n);\n/*\n\tReactDOM.render(\n\t\t<div>\n  \t\t\t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n  \t\t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n  \t\t\t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n  \t\t</div>\n \tdocument.getElementById('root')\n\n-----------------------------------------------------------------------------------------\n\n \tReactDOM.render(\n\t<Cardlist robots={robots}/>,\n \tdocument.getElementById('root')\n);\n);\n*/\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}